// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1MetricsHandlerFunc turns a function with the right signature into a get v1 metrics handler
type GetV1MetricsHandlerFunc func(GetV1MetricsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1MetricsHandlerFunc) Handle(params GetV1MetricsParams) middleware.Responder {
	return fn(params)
}

// GetV1MetricsHandler interface for that can handle valid get v1 metrics params
type GetV1MetricsHandler interface {
	Handle(GetV1MetricsParams) middleware.Responder
}

// NewGetV1Metrics creates a new http.Handler for the get v1 metrics operation
func NewGetV1Metrics(ctx *middleware.Context, handler GetV1MetricsHandler) *GetV1Metrics {
	return &GetV1Metrics{Context: ctx, Handler: handler}
}

/*
	GetV1Metrics swagger:route GET /v1/metrics metrics getV1Metrics

get all metrics
*/
type GetV1Metrics struct {
	Context *middleware.Context
	Handler GetV1MetricsHandler
}

func (o *GetV1Metrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetV1MetricsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
