// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Notification service",
    "title": "Notification service",
    "version": "1.0.0"
  },
  "host": "sunbirdrc.dev",
  "basePath": "/notification-service/v1",
  "paths": {
    "/health": {
      "get": {
        "description": "API to get the notification health status",
        "tags": [
          "health"
        ],
        "summary": "Get the health status",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/notification": {
      "get": {
        "description": "Temporary API to get the last notifications sent",
        "tags": [
          "notification"
        ],
        "summary": "Get the last notifications sent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "description": "Common notification service for different channels like eSMS, email etc. Target address can depict specifics about mode and channel",
        "tags": [
          "notification"
        ],
        "summary": "Notify the intended person using different channels",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NotificationRequest": {
      "type": "object",
      "required": [
        "recipient",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "recipient": {
          "description": "this can use address like tel:234343434 or mailto:user@example.com",
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "Success": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "hasRole": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://sunbirdrc.dev/keycloak/auth/realms/sunbirdrc/protocol/openid-connect/auth",
      "tokenUrl": "https://sunbirdrc.dev/keycloak/auth/realms/sunbirdrc/protocol/openid-connect/token",
      "scopes": {
        "admin": "scope of super admin",
        "facility-admin": "scope of facility admin",
        "facility-staff": "scope of facility staff"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Notification service",
    "title": "Notification service",
    "version": "1.0.0"
  },
  "host": "sunbirdrc.dev",
  "basePath": "/notification-service/v1",
  "paths": {
    "/health": {
      "get": {
        "description": "API to get the notification health status",
        "tags": [
          "health"
        ],
        "summary": "Get the health status",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/notification": {
      "get": {
        "description": "Temporary API to get the last notifications sent",
        "tags": [
          "notification"
        ],
        "summary": "Get the last notifications sent",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "description": "Common notification service for different channels like eSMS, email etc. Target address can depict specifics about mode and channel",
        "tags": [
          "notification"
        ],
        "summary": "Notify the intended person using different channels",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NotificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "NotificationRequest": {
      "type": "object",
      "required": [
        "recipient",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "recipient": {
          "description": "this can use address like tel:234343434 or mailto:user@example.com",
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "Success": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "hasRole": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://sunbirdrc.dev/keycloak/auth/realms/sunbirdrc/protocol/openid-connect/auth",
      "tokenUrl": "https://sunbirdrc.dev/keycloak/auth/realms/sunbirdrc/protocol/openid-connect/token",
      "scopes": {
        "admin": "scope of super admin",
        "facility-admin": "scope of facility admin",
        "facility-staff": "scope of facility staff"
      }
    }
  }
}`))
}
